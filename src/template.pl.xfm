<: #-*- perl -*-

# gpl
# 
#  Author: Renwix (renwix@gmail.com)
#  Maintainer: Renwix
#  Copyright (C) 2008 Renwix, all rights reserved.
#  Created: Tue Sep 23 23:52:17 MDT 2008
# 
# 
#=======================================================================
# 
# This file is part of theSiliProject, a humorous software organization,
# design and development toolkit.
# 
# theSiliProject is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# theSiliProject is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with theSiliProject. If not, see <http://www.gnu.org/licenses/>.
# 
#=======================================================================
# 
# /gpl

# $xfmpipe = [{ command => 'pp.pl'}, {command => 'm4w', chmod => '+x' }]
use Helpers::PerlScript;

#
# Calculate the template repo based on whether this is a build or not. We get the
# build info from the PKG_TEMPLATES variable which is part of m4w. Let m4w manage
# the env vars when possible. In our case, the following changequote is required.
# m4_changequote(<++,++>)m4_dnl
#
my $tRepoDir = 'PKG_TEMPLATES';


my $ps = Helpers::PerlScript->new( name => 'template.pl' , 
                                   description => q!

This is a wrapper around the notion of a template repository. The
repository contains a bunch of templates that conform to the xfmPipe
standards and have a .xfm or .tmpl extension. Use this tool to list
the contents of the repository (see the --list flag below) or to
expand a template in the repository.

There are basically two types of templates: 

=over 4

=item tar-like templates

The tar like templates are comprised of many files and are put
together with the tarchive.pl utility. If you have a collection of
files that need to get expanded together, create a template with the
tarchive.pl utility. Take the output of that and convert it to
something that works with runPath.pl, or if it is static, just use it
as is.

=item simple templates. 

The simple templates are a single file. Use runPath to create the
template.

=back

The template and the template.pl tool interact with the templates that
they are expanding. In a nutshell, the templates have access to some
of the memory spaces in the template.pl tool. They can derive their
own information based on what is defined in the template.pl tool at
runtime, and they can set data that controls the template expansion
algorithm. The way that this interaction happens is defined here:

=over 4

=item 1

The template is searched for blocks that start/end with
<templateDefinition> and </templateDefinition>. Any code specified
here has access to the template.pl global variables - see below.

=item 2

The template is scanned for 'VARIABLES' that are marked with a comment
char followed by the keyword specified on the command line. If found,
these variables are matched against the environment to derive the
values. If the value is not found, then the user is prompted.

=back


The following global variables are available in your templates:

=over 4

=item $templateName

The name of the template in the repository that is being expanded.

=item $outputName

The name that the user has specified as the output of this
command. This is derived from the '--output' commandline argument.

=item $templateRepository

The path to the folder where the templates live.

=item $expansionCommand

Provide a custom expansion command for templates.

=item $complexTemplate

The default is simple. A complex template is one that uses
tarchive.pl to do the expansion.

=back


                                   !,
                                   include => ['FileHandle'],
                                   getopts => [
                                               { tag => 'templateRepository:s',
                                                 variable => '$templateRepository',
                                                 default => $tRepoDir,
                                                 description => 'The location of the template repository',},
                                               { tag => 'list',
                                                 variable => '$list',
                                                 default => $list,
                                                 description => q[
                                                                  
This script will also list the templates in the repository, to make things a lot easier.
The --list flag is sort of the default behavior, and is treated as a regular expression.
The following syntaxes do the following:

=over 4

=item template --list

Will list all the templates in the repo

=item template --list --name XXX

Will list all the templates that match XXX

=item template XXX

The last one is so common, that there is shorthand
for it.

=back

                                                              ]},
                                               { tag => 'name:s',
                                                 variable => '$name',
                                                 description => 'The name of the template that should be expanded',},
                                               
                                               { tag => 'output:s',
                                                 variable => '$output',
                                                 description => 'If specified, the target directory or file that this should be expanded to.',},
                                               
                                               { tag => 'extension:s',
                                                 variable => '$extension',
                                                 default => 'tmpl',
                                                 description => 'the default filename extension for templates in the templateRepository.',},
					       ],
                                   );
print $ps->dump(); print $ps->pod();
print $ps->_strip_blocks( start_tag => '<templateDefinition>',
                          end_tag => '</templateDefinition>',
                          strip_comments => 1 );
:>

#
# This script runs in 2 modes... It will list the contents of the repo (optionally against a regex specified
# in name, or it will expand the template requested by $name
# 
# I am finding that the pattern matching tricks are REALLY useful, so I think I want that to be the default
# - you don't need the -l flag if you don't want to specify it. If you just provide @ARGV, they become --list
# for you. And you get the listing functionality. If you specify both, then --list wins.
#

if (scalar @ARGV && ! $list) {
  ($name) = @ARGV; $list = 1;
}

if ($list) {
  # resolve the template name
  my %uniq = ();
  opendir(D, $templateRepository) || Confess "unable to open templateRepository '$templateRepository': $!";
  my @possibleMatches = grep { /($list|$name).+(xfm|$extension)$/i } readdir(D);
  closedir(D);

  for my $match (@possibleMatches) {
    my $shortName = $match; $shortName =~ s/^(.+?)\..+$/$1/;
    
    if ($uniq{$shortName}) {
      $uniq{ $uniq{$shortName} } = $uniq{$shortName};
      $uniq{ $match } = $match;
      delete $uniq{$shortName};
    } else {
      $uniq{ $shortName } = $match;
    }
  }

  print join("\n", keys %uniq);
  print "\n" if keys %uniq;

  cleanup 0;
}



#
# Expand template
# 
print_usage() unless $name && $output;
do {
  # resolve the template name
  my $templateName = '';
  if ( -f "$name" ) {
    $templateName = $name;
    $templateRepository = '';
  } elsif ( -f "$name.$extension" ) {
    $templateName = "$name.$extension";
    $templateRepository = '';
  } else {
    # use the templateRepository
    opendir(D, $templateRepository) || Confess "unable to open templateRepository '$templateRepository': $!";
    my @possibleMatches = grep { /^$name.+$extension$/ } readdir(D);
    closedir(D);
    
    my ($exactMatch) = grep { /^$name\.$extension$/ } @possibleMatches;
    if ($exactMatch) {
      $templateName = $exactMatch;
    } else {
      if (scalar @possibleMatches > 1) {
        Croak "more than one match for '$name': @possibleMatches";
      } elsif (scalar @possibleMatches == 0) {
        Croak "no templates matching '$name' found in '$templateRepository'";
      } else {
        $templateName = $possibleMatches[0];
      }
    }
  }

    # create a helper variable for the script author
    my $outputName = $output; 
    $outputName =~ s!/$!!; # strip a trailing slash
    $outputName =~ s/^.+\///; # strip everything up to the end
    $outputName =~ s/^(.+?)\..+$/$1/; # backwards compatibility - strip everything up to the first '.'


    # get the template defintion as told by the template
    my $templatePath = '';
    if ($templateRepository) {
        $templatePath = "$templateRepository/$templateName";
    } else {
        $templatePath = $templateName;
    }
    my $templateDefintion = _strip_blocks( new FileHandle( "$templateRepository/$templateName" ) );
                                           
    # load the template defintion
    if ($templateDefintion) {
        debugPrint 1, "Found a template definition - applying";
        eval $templateDefintion; Confess $@ if $@;
    }

    # check it for an exported environment
    my ($code) = docmd("getMD.pl --format perl \$(cat $templatePath | keyCleaner.pl -k TMPL)");
    if ($code) {
        debugPrint 1, "about to eval: $code";
        eval $code; Confess $@ if $@;
    }
#    }


    # simple or complex template?
     # - this would have been defined in the TMPLs as a passthrough
    if ($expansionCommand) {
        docmd $expansionCommand;
    } elsif ($complexTemplate) {
        docmd "runPath -file $templatePath -dest $output.tmpl";
        docmd "tarchive.pl -x -f $output.tmpl -r $output";
        docmd "rm -f $output.tmpl" unless $debug;
    } else {
        docmd "runPath -file $templatePath -dest $output";
    }
    
};
cleanup 0;
