dnl -*-m4-*-
dnl The general format for this file is to m4_include all the tests in
dnl the current directory (as necessary). Each of those files should have
dnl a AT _ SETUP and an AT _ CLEANUP block in it
dnl gpl
dnl 
dnl  Author: Renwix (renwix@gmail.com)
dnl  Maintainer: Renwix
dnl  Copyright (C) 2008 Renwix, all rights reserved.
dnl  Created: Tue Sep 23 23:52:17 MDT 2008
dnl 
dnl 
dnl=======================================================================
dnl 
dnl This file is part of theSiliProject, a humorous software organization,
dnl design and development toolkit.
dnl 
dnl theSiliProject is free software: you can redistribute it and/or modify
dnl it under the terms of the GNU General Public License as published by
dnl the Free Software Foundation, either version 3 of the License, or
dnl (at your option) any later version.
dnl 
dnl theSiliProject is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl GNU General Public License for more details.
dnl 
dnl You should have received a copy of the GNU General Public License
dnl along with theSiliProject. If not, see <http://www.gnu.org/licenses/>.
dnl 
dnl=======================================================================
dnl 
dnl /gpl
AT_SETUP(silid)

AT_CHECK([echo 1 | sili --which],
         [0],
         [export ROOT="AT_TEST_ROOT"; export SILI="AT_TEST_ROOT/silid_1.pl"; ],
[ 0) sili: The sili codeline
 1) tests: The tests in the sili codeline
 2) compiler_test: silis_c_1.pl
],
[cat >$[]XFAILFILE <<'_EOT'

==============================================================
WARNING: SILID not defined. silid.at tests will all fail
==============================================================
_EOT
],
[rm -f $[]XFAILFILE])


AT_CHECK([(eval $(echo 2 | sili --which) && sili -c)],
         [0],
         [$VAR1 = bless( {
                 'permissive' => 1,
                 'name' => 'phase1',
                 'children' => [[]],
                 'doc' => 'hello world',
                 'fn' => sub { "DUMMY" }
               }, 'Sili::C' );
$VAR1 = [[
          'hi there'
        ]];
This is a test in main::tester
This is a test in main::tester
$VAR1 = bless( {
                 'permissive' => 1,
                 'name' => 'nestedTest1',
                 'children' => [[
                                 bless( {
                                          'permissive' => 1,
                                          'name' => 'nestedTest2',
                                          'children' => [],
                                          'doc' => 'hello world',
                                          'fn' => sub { "DUMMY" }
                                        }, 'Sili::C' )
                               ]],
                 'doc' => 'hello world',
                 'fn' => sub { "DUMMY" }
               }, 'Sili::C' );
$VAR1 = [[
          'hi there',
          'hi there from nested test1'
        ]];
$VAR1 = bless( {
                 'permissive' => 1,
                 'name' => 'nestedTest2',
                 'children' => [[]],
                 'doc' => 'hello world',
                 'fn' => sub { "DUMMY" }
               }, 'Sili::C' );
$VAR1 = [[
          'hi there',
          'hi there from nested test1',
          'hi there from nested test2'
        ]];
$VAR1 = bless( {
                 'permissive' => 1,
                 'name' => 'nestedTest1',
                 'children' => [[
                                 bless( {
                                          'permissive' => 1,
                                          'name' => 'nestedTest2',
                                          'children' => [],
                                          'doc' => 'hello world',
                                          'fn' => sub { "DUMMY" }
                                        }, 'Sili::C' )
                               ]],
                 'doc' => 'hello world',
                 '_failed_cnt' => '1',
                 'fn' => sub { "DUMMY" }
               }, 'Sili::C' );
$VAR1 = [[
          'hi there',
          'hi there from nested test1',
          'hi there from nested test2',
          'hi there from nested test1'
        ]];
$VAR1 = bless( {
                 'permissive' => 1,
                 'name' => 'nestedTest2',
                 'children' => [[]],
                 'doc' => 'hello world',
                 'fn' => sub { "DUMMY" }
               }, 'Sili::C' );
$VAR1 = [[
          'hi there',
          'hi there from nested test1',
          'hi there from nested test2',
          'hi there from nested test1',
          'hi there from nested test2'
        ]];
],
[ 0) sili: The sili codeline
 1) tests: The tests in the sili codeline
 2) compiler_test: silis_c_1.pl
],
[cat >$[]XFAILFILE <<'_EOT'

==============================================================
WARNING: sili -c (compilation) failed
==============================================================
_EOT
],
[rm -f $[]XFAILFILE])


AT_CLEANUP
