<@ # -*-perl-*-

# gpl
# 
#  Author: Renwix (renwix@gmail.com)
#  Maintainer: Renwix
#  Copyright (C) 2008 Renwix, all rights reserved.
#  Created: Tue Sep 23 23:52:17 MDT 2008
# 
# 
#=======================================================================
# 
# This file is part of theSiliProject, a humorous software organization,
# design and development toolkit.
# 
# theSiliProject is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# theSiliProject is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with theSiliProject. If not, see <http://www.gnu.org/licenses/>.
# 
#=======================================================================
# 
# /gpl

# $xfmpipe = [{command => "pp -s '<@' -e '@>'" , }] -*-xml-*-
# <templateDefinition> my $tmp = $outputName; $tmp =~ s/\.pm.+$//; $ENV{object} = $tmp; </templateDefinition>
use Env qw(object);

@><: #-*- perl -*-

<@ use Env; @>

# $xfmpipe = [{command => 'pp.pl' }];
use Helpers::PerlObject; 

my $po = Helpers::PerlObject->new (name => "<@= $object @>",
			           isa => '',
                                   include => [],
                                   example =>
q[
    my $<@= $object @> = $<@= $object @>->new();   # stub example .... expand
],
				   description => '');

$po->setMembers([
#                 {name => "filename", 
#		  type => "string", 
#		  required => 1,
#		  format => '([\/\w\d]+)\.uxf',
#		  description => "Name of the document to generate"},
#                 {name => "elements",
#                  ref => 'ARRAY',
#                  description => "Array of UXFElement objects in this document"},
]); 

:>
<:= $po->dump(); :>

sub _new {
<:= $po->dumpContract(method => "_new"); :>
}

#
# # This is an example of how to generate a method signature:
#
# # REMEMBER to remove the spaces from the '< : ' below
#
#sub <<methodName>> {
# 
#    < : = $po->contract('method' => {description => "method description",
#                                     getopts => [ { name => 'host',
#                                                    required => t,
#                                                    default => 'DefaultValue',
#                                                    description => 'The name of the host that this database schema should live on' }, ] } ) :>
#}
#
	    

