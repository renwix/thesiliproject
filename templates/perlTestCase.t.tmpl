<@ # -*-perl-*-

# gpl
# 
#  Author: Renwix (renwix@gmail.com)
#  Maintainer: Renwix
#  Copyright (C) 2008 Renwix, all rights reserved.
#  Created: Tue Sep 23 23:52:17 MDT 2008
# 
# 
#=======================================================================
# 
# This file is part of theSiliProject, a humorous software organization,
# design and development toolkit.
# 
# theSiliProject is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# theSiliProject is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with theSiliProject. If not, see <http://www.gnu.org/licenses/>.
# 
#=======================================================================
# 
# /gpl

# $xfmpipe = [{command => "pp.pl  -s '<@' -e '@>'" , }] -*-xml-*-
# <templateDefinition> my $tmp = $outputName; $tmp =~ s/\.t\..+$//; $ENV{script} = $tmp; </templateDefinition>
use Env qw(script);
@><: #-*- perl -*-
# $xfmpipe = [{ command => 'pp.pl', chmod => '+x' }]
use Helpers::TestHelper;

my $ps = new Helpers::TestHelper( name => '<@= $script @>.pl' , 
                                  description => 'test case for ...',

#
# Specify the following if you want to embed seed data in the __ DATA __ block
# in this perl script. If so, a variable '$dataFile' will be available with
# a pointer to the name of the script that is written out.
# 
#                                  useDataFile => 1,
                                  include => [ 'Data::Dumper' ],
                                  getopts => [ ],
                                  );
print $ps->dump(); print $ps->pod();
:>

#
# This is where the actual test code should be inserted.
#
# There is a function called 'test()' available that can be used
# to run the actual test. For example: 
# 
# my $shellEnvironment = new ATE::IEnvironment( querySource => "$dataFile" );
# $shellEnvironment->setLibrary( "$dataFile" );
# test $shellEnvironment->query() ;
#




#
# Cleanup, print the testReport
# 
cleanup 0, testReport();



#
# If you want to use seed data, you might want to put it in the following block
# and have the test script hand you a string with the generated filename in it.
# 
# __DATA__
# 1|2|3
# 1|2|3
# 1|2|3
