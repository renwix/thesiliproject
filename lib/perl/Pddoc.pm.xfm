<: #-*- perl -*-

# gpl
# 
#  Author: Renwix (renwix@gmail.com)
#  Maintainer: Renwix
#  Copyright (C) 2008 Renwix, all rights reserved.
#  Created: Tue Sep 23 23:52:17 MDT 2008
# 
# 
#=======================================================================
# 
# This file is part of theSiliProject, a humorous software organization,
# design and development toolkit.
# 
# theSiliProject is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# theSiliProject is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with theSiliProject. If not, see <http://www.gnu.org/licenses/>.
# 
#=======================================================================
# 
# /gpl

# $xfmpipe = [{command => "pp.pl" }];
use Helpers::PerlObject; 
use Helpers::PerlScript;
my $po = Helpers::PerlObject->new (name => "Pddoc",
			           isa => '',
                                   include => ['File::Basename',
                                               ],
                                   example => q[
N/A
                                                ],
				   description => q[

Find all the files with pod docs in the \@INC directories. This will work for 
shell scripts or anything else that has them. It uses the stripblocks code
to get the poddocs out of those files.

Optionally it will create an entry on a Confluence wiki if needed. It will
derive the Confluence hierarchy from the file first, then from the directories
that the file sits in relative to the \@INC path.


                                                    ]);

$po->setMembers([{ name => 'repository', 
                   required => 1,
                   description => "pddoc uses a library outside of \@INC. This the root of that library."},
                 ]); 

print $po->dump();

my $ps = new Helpers::PerlScript;
print $ps->_strip_blocks( start_tag => '=pod',
                          end_tag => '=cut',
                          strip_comments => 1,
                          preserve_block => 1 );
:>

#
# This is probably sufficiently abstracted at this point to pull into a generator somewhere
# for reuse across classes. (if necessary)
# 
sub rmapDirectory {
    <:= $po->contract( rmapDirectory => { description => 'Recurse a directory structure against a root. During the descent, build a tree that contains all the data we know about that particular node and cache it in the module s "data" member.',
                                      getopts => [{ name => 'root',
                                                    description => 'The root to use to recurse and find all files',
                                                    required => 1 },
                                                  { name => 'processor',
                                                    ref => 'CODE',
                                                    description => 'A fn that will do some work on all the files in a directory. Returns a list of files to be appended to the full list.' }] } ):>
    do {

        # get a list of files, dirs in the current node
        opendir(D, $root) || Confess "unable to open dir $root: $@";
        my (@files, @dirs, @sourceDirs) = ();
        map { my $x = "$root/$_"; (-d $x && push @dirs, $x) || (-f $x && push @files, $x) } 
        grep { ! /^t$/ }
        grep { ! /^\.+/ } readdir(D);
        closedir(D);

        $this->debugPrint(3, "=== $root ===\ndirs:", Dumper(\@dirs), "files:", Dumper(\@files));

        # post process the files.
        if ($processor) {
            my @matchedFiles = $processor->( @files );
            @files = @matchedFiles; # set it to the files that matched the rules.
        }

        # recurse through all child directories
        for my $dir (@dirs) {
            my ($ardirs, $arfiles);
            if ($processor) {
                ($arfiles) = $this->rmapDirectory( root => $dir, processor => $processor );
            } else {
                ($arfiles) = $this->rmapDirectory( root => $dir );                
            }

            # cache the dirs, files if the child had files in it.
            if (scalar @$arfiles) {
                push @files, @$arfiles;
            }
        }

        return \@files;
    };
}


sub index {
    <:= $po->contract( index => { description => 'given a root, find all the files that contain pod and move the pod to the index.',
                                  getopts => [{ name => 'root',
                                                required => 1,
                                                description => 'The directory to search for pod files that need indexing.' },
                                              { name => 'keepRootName',
                                                description => 'boolean if specified, the file the doc under a dir named for the root' } ] } ) :>
    do {                 
        my $indexDirectory = $this->getRepository;
        $root =~ s/\/$//;

        # filter out the files we don't want
        my $c = sub { grep { ! /\/build\// } grep { ! /-\d\.\d+.\d+/ } grep { ! /.xfm$/ } grep { ! /\#/ } grep { ! /\~$/ } @_ };

        my ($arFiles) = $this->rmapDirectory( root => $root, processor => $c );
        my %mdoSeen = ();
        for my $file (@$arFiles) {
            $this->debugPrint(3, "building relative path ... $indexDirectory - $file - $root - ", basename($root));
            my $relativePath = $file; 

            $relativePath =~ s/^$root\///;
            $relativePath = basename($root) . '/' . $relativePath if ($keepRootName);
            my $buildFile = "$indexDirectory/$relativePath.pod";

            my $pod = '';
            open( SRC, "<$file" ) || Confess "unable to open $file: $@";
            $pod = _strip_blocks( *SRC );
            close( SRC );

            # if the file didn't have pod, make sure the .xfm version of it
            # doesn't have them inside poddocs...
            if (! $pod && -f "$file.xfm" ) {
                $this->debugPrint(1, "$file missing docs, but $file.xfm has em");
                open( SRC, "<$file.xfm" ) || Confess "unable to open $file.xfm: $@";
                $pod = _strip_blocks( *SRC );
                close( SRC );
            }

            # if it is a metadata object...
            if (! $pod && $file =~ m!metadata/object.+\.pm$!) {
                $this->debugPrint(1, "looks like a metadata object... Attempting to gen mdo docs");
                my @contents = grep { s/^\s*package\s+(.+);.*$/$1/ } `grep package $file`;
                require $file;
                $pod = "=pod\n\n=head1 " . basename($file) . "\n\n";
                $pod .=<<'EOF';
This is a collection of MetaDataObjects. Each MDO has a common
interface depending on the version that you are looking at.

This object is in version 1 of MDO and uses the MDOInterface.

These all have a 'prop' function that can be used as both a setter and a getter:

    $obj->prop('key')             # get a value
    $obj->prop('key', 'myvalue')  # set a value

EOF
                for my $k ( @contents ) {
                    chomp $k;
                    no strict;
                    my ($isa) = @{ $k . '::ISA' };
                    $pod .= "=head2 $k (isa: $isa)\n\n";
                    while (my ($tag,$doc) = each %{ $MetaDataObject::ObjectDocs{$k} }) {
                        next if ref $tag;
                        $pod .= "=head3 $tag\n\n$doc\n\n";
                    }
                }
                $pod .= "=cut\n\n";
            }
            

            if ($pod) {
                $this->debugPrint(2, "checking file stats ", -f $buildFile, -M $buildFile, -M $file);
                if (! -f $buildFile || -M $buildFile < -M $file ) {
                    
                    $this->debugPrint( 1, "updating $buildFile from $file");
                    
                    my $tmpDir = dirname( $buildFile );
                    system( "mkdir -p $tmpDir" );
                    
                    open( TRG, ">$buildFile" ) || Confess "unable to open $buildFile: $@";
                    print TRG $pod;
                    close( TRG );
                }
            }
        }
    };
}

sub find {
    <:= $po->contract( find => { description => 'find a file off the root of the repository',
                                 getopts => [{ name => 'fileName',
                                               required => 1,
                                               description => 'The name of the file that we are looking for' }] } ) :>
    do {
        $fileName =~ s/::/\//g;
        $fileName =~ s/\//\\\//g;
        my $finder = sub { 
            my @files = ();
            for my $file (@_) {
                push @files, $file if $file =~ /$fileName/o;
            }
            return @files;
        };

        my ($arFiles) = $this->rmapDirectory( root => $this->getRepository, processor => $finder );
        return @$arFiles;
    };
}


