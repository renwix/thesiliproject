<: #-*-perl-*-

# gpl
# 
#  Author: Renwix (renwix@gmail.com)
#  Maintainer: Renwix
#  Copyright (C) 2008 Renwix, all rights reserved.
#  Created: Tue Sep 23 23:52:17 MDT 2008
# 
# 
#=======================================================================
# 
# This file is part of theSiliProject, a humorous software organization,
# design and development toolkit.
# 
# theSiliProject is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# theSiliProject is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with theSiliProject. If not, see <http://www.gnu.org/licenses/>.
# 
#=======================================================================
# 
# /gpl

# $xfmpipe = [{command => "pp.pl" }];
use Helpers::PerlObject;

my $po = Helpers::PerlObject->new (name => "Directive",
                                   include => ['English',
                                               'File::Basename',
                                               'Data::Dumper',
                                               ],
                                   example => q[
                                                
  my $Directive = $Directive->new();   # stub example .... expand
  $Directive->setInputFile( $filename );
  $Directive->setOutputFile( $filename );
  $Directive->setTmpDir( '/a/different/tmp/dir' ); # defaults to /tmp
  $Directive->process();

                                                  ],
                                   description => q[
This thing is supposed to take an input file and produce an
output file that has gone through the specified transformations.
                                                    ] );
$po->setMembers([{ name => 'tmpDir',
                   default => '.',
                   description => "The temp dir to be used for xform work" },
                 { name => 'directive',
                   default => 'xfmpipe',
                   description => 'The command declaration tag' },
                 { name => 'inputFile',
                   description => 'The input file' },
                 { name => 'outputFile',
                   description => 'The output file' },
                 { name => 'commands',
                   required => 1,
                   description => 'The command pipeline override' },
                 { name => 'fileExtensionMapDB',
                   default => '$ENV{XFMPIPE_FILEEXTENSIONS}',
                   description => 'A map containing the list of pre-defined conversion maps' },
                 { name => 'keep',
                   description => 'Save the output steps.' },
                 { name => '_currentIterator',
                   default => '1',
                   description => 'Internal counter to track position in pipeline' },
                 ]);
print $po->dump(); :>


# gpl
# 
#  Author: Renwix (renwix@gmail.com)
#  Maintainer: Renwix
#  Copyright (C) 2008 Renwix, all rights reserved.
#  Created: Tue Sep 23 23:52:17 MDT 2008
# 
# 
#=======================================================================
# 
# This file is part of theSiliProject, a humorous software organization,
# design and development toolkit.
# 
# theSiliProject is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# theSiliProject is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with theSiliProject. If not, see <http://www.gnu.org/licenses/>.
# 
#=======================================================================
# 
# /gpl


sub process {
<:$po->contract( process => {
  description => 'generate the output' } ) :>

  do {
    # tmp dir takes the process id to make it really temp.
    $this->setTmpDir( $this->getTmpDir . "/.directive.$PROCESS_ID" );
    $this->docmd( 'mkdir -p ' . $this->getTmpDir );
    
    # Get the list of commands to run
    $this->deriveCommands();

    # do the processing
    for my $cmd ( @{ $this->getCommands } ) {
      $this->applyConversion( command => $cmd );
    }
    $this->copyToOutput();
    
    # delete the temp dir (and delete everything)
    if ($this->getKeep) {
      $this->debugPrint( 1, "Itermediate files left in " . $this->getTmpDir );
    } else {
      $this->docmd( 'rm -rf ' . $this->getTmpDir );
    }
  };
}    

sub deriveCommands {
<: $po->contract( deriveCommands => {
  description => 'parse the input file (maybe) to derive the commands that should run' } ) :>

  do {
    return if $this->getCommands;
    
    my $d = $this->getDirective();
    open(F, '<' . $this->getInputFile) ||
      Confess "Can't open file: " . $this->getInputFile . ": $!";
    while (<F>) {
      
      # take the top one only.
      if (m/(\$$d\s*=\s*\[.+?\])/) {
        no strict;
        local $x;
        eval "\$x = $1";
        $this->setCommands( $x );
        last;
      }
    }
    close(F);
    $this->deriveFileExtensionBasedCommand() unless $this->getCommands;
    $this->setCommands( [{ command => 'cat' }] ) unless $this->getCommands; # default is to cat
  };
}

sub applyConversion {
<: $po->contract( applyConversion => {
  description => 'given a command, take the current inputfile through that command',
  getopts => [ { name => 'command',
                 description => 'The command that should get applied' } ] } ) :>
  do {
    # create a new input file
    my $output = $this->getTmpDir . '/directive.iter.' . $this->get_currentIterator;
    my $input = $this->getInputFile();
    
    # backwards compatibility
    my $cmd = $command->{command};
    my $doExec = $command->{exec};
    my $doCat = $command->{cat};
    my $doChmod = $command->{chmod};
    
    # pick up things from the environment
    $cmd .= ' --debug' if $this->getDebug;
    
    # run the command
    if ($cmd =~ /^cat/) {
      $this->docmd( "$cmd $input > $output" );
    } else {
      $this->docmd( "$cmd < $input > $output" );
    }
    $this->docmd( "chmod $doChmod $output" ) if $doChmod;
    $this->docmd( "cat $output" ) if $doCat;
    
    $this->docmd( "$ENV{SHELL} $output" ) if $doExec;
    
    $this->setInputFile( $output );
    $this->set_currentIterator( $this->get_currentIterator + 1 );
  };
}


sub copyToOutput {
<: $po->contract( copyToOutput => {    
  description => 'Create the final output file' } ) :>
  do {
    $this->docmd( 'cp ' . $this->getInputFile . ' ' . $this->getOutputFile );
  };
}

sub deriveFileExtensionBasedCommand {
<: $po->contract( deriveFileExtensionBasedCommand => {
  description => q[
Look up the conversion command string based on the filename extension. This offers another way to list what can be done.
                   ] } ) :>
  do {
    return unless $this->getFileExtensionMapDB;
    my $extension = $this->getInputFile;
    $extension =~ s/^.+\.([^\.]+)(\.xfm|)$/$1$2/;
    $this->debugPrint( 1, "Attempting to derive the file extension from $extension" );
    eval {
      no strict;
      local $data;
      require $this->getFileExtensionMapDB;
      if ( exists $data->{$extension} ) {
        $this->setCommands( $data->{$extension} );
      }
    }; if ($@) {
      Confess "Bad file extension map " . $this->getFileExtensionMapDB . ": $@";
    }
  };
}
