<: #-*- perl -*-

# gpl
# 
#  Author: Renwix (renwix@gmail.com)
#  Maintainer: Renwix
#  Copyright (C) 2008 Renwix, all rights reserved.
#  Created: Tue Sep 23 23:52:17 MDT 2008
# 
# 
#=======================================================================
# 
# This file is part of theSiliProject, a humorous software organization,
# design and development toolkit.
# 
# theSiliProject is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# theSiliProject is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with theSiliProject. If not, see <http://www.gnu.org/licenses/>.
# 
#=======================================================================
# 
# /gpl

# $xfmpipe = [{command => 'pp.pl' }];
use Helpers::PerlObject; 

my $po = new Helpers::PerlObject (name => "Helpers::TestHelper",
			           isa => 'Helpers::PerlScript',
                                   include => [],
                                   example =>
q[
  See a .t.xfm file in the tree.
],
				   description => 'A Helper for generalizing the test harness');

$po->setMembers([{ name => 'useDataFile',
                   description => 'A lot of tests use the __ DATA __ perl filehandle. Specifying this boolean flag will create a variable called $dataFile that is accessible from the test'}]); 

print $po->dump(); :>

sub _new {
<:= $po->dumpContract(method => "_new"); :>
    unshift @{ $this->getInclude }, 'lib qw( ../.. ..)';
    $this->SUPER::_new();
}

sub dump {
    <:= $po->contract( dump => { description => 'This is an extension of the PerlScript dump function that adds in some of the test harness features' } ) :>
    do {
        my $o = $this->SUPER::dump();
        $o .= __testMethods();
        $o .= __createDataFile() if $this->getUseDataFile();
        return $o;
    };
}


sub __testMethods() {
    return <<'EOF';
    my $ttl_test = 0;
    my $test_failed = 0;
sub test (@) {
    $ttl_test++;
    if (scalar @_) {
        debugPrint( 0, Dumper(\@_) );
        return 1;
    }
    $test_failed++;
}
sub testReport (@) {
    print "\n", "="x40, "\n";
    print "Test $0 had $ttl_test total tests. Of those $test_failed failed.\n";
    print "@_\n";
#    print "\n", "="x40, "\n";
}

EOF
}

sub __createDataFile {
    return <<'EOF';
#
# Put the data in a temp file
#
my $dataFile = "$0.dat";
open( F, ">$dataFile" ) or Confess "unable to create $dataFile: $!";
while (<DATA>) {
    print F;
}
close(F);


EOF
}
