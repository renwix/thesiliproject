<: # -*-perl-*-

# gpl
# 
#  Author: Renwix (renwix@gmail.com)
#  Maintainer: Renwix
#  Copyright (C) 2008 Renwix, all rights reserved.
#  Created: Tue Sep 23 23:52:17 MDT 2008
# 
# 
#=======================================================================
# 
# This file is part of theSiliProject, a humorous software organization,
# design and development toolkit.
# 
# theSiliProject is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# theSiliProject is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with theSiliProject. If not, see <http://www.gnu.org/licenses/>.
# 
#=======================================================================
# 
# /gpl

# $xfmpipe = [{command => "pp.pl" }];
use Helpers::PerlObject; 

my $po = Helpers::PerlObject->new (name => "DB::DBHandle",
				   description => "Base Class For DBIDatabase Handle Wrapper.");

$po->setMembers([{name => "user", type => "string", 
		  description => "username for the oracle instance to connect to"},
		 {name => "password",		  
		  description => "password for the oracle instance to connect to"},
		 {name => "host", 
		  description => "host for the oracle instance to connect to"},
		 {name => "namespace", 
		  description => "as an alternative to setting all of the individual connect parameters, a tag like \"DB\" could be use to access a namespace"},
		 {name => "dbh", ref => "DBI::db",
		  description => "DBI handle for this Oracle Connection"},
		 {name => "connectString", 
		  description => "DBI connect string for call to DBI->connect()"},]); 

$po->setMethods("connect" => {description => "initializes database connection",
# 			     getopts => [{ name => "markup", 
# 					   required => 1,
# 					   description => "rendering format",
# 					   format => "(html|wiki)"},],
},);


:>

use DBI;

<:= $po->dump(); :>

sub _new {
<:= $po->dumpContract(method => "_new"); :>

    if ($this->getNamespace()) {
	$this->setUser($ENV{$this->getNamespace() . "_USER"});
	$this->setPassword($ENV{$this->getNamespace() . "_PASSWD"});
	$this->setSID($ENV{$this->getNamespace() . "_SID"});
	$this->setHost($ENV{$this->getNamespace() . "_HOST"});
	$this->setPort($ENV{$this->getNamespace() . "_PORT"});
    }

    $this->setPort(1521) unless $this->getPort();

    $this->_require('user', 'password', 'SID', 'host', 'port');
}

sub connect {
<:= $po->dumpContract(method => "connect"); :>
    do {
        my $dbh;
        eval {
            $dbh = DBI->connect($this->getConnectString,, 
                                $this->getUser, 
                                $this->getPassword,
                                { RaiseError => 1 });
        }; if ($@ || $DBI::errstr) {
            Confess "Failed to connect to DB: $@ : $DBI::errstr";
        }

        $this->setDbh($dbh);
    };
}

sub execute {
    <:= $po->contract("execute" => {description => "execute a sql query ",
				    getopts => [{name => "sql", 
						 description => "sql string for this statement" },
						{name => "verbose",
						 description => "echo the sql string to STDERR"},],}); :>
    do {
        print STDERR "DBEXEC: " . $sql . "\n" if $verbose;
        $this->getDbh()->prepare($sql)->execute()
            or Confess "ERROR: $DBI::errstr";
    };
}
